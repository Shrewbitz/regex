abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ 
1234567890

MetaCharacters (need tp be escaped):
.[{()\^$|?*+

s.w.gieseker@gmail.com

\. selects period

s\.w\.gieseker@gmail\.com

matches
##############################################################################

.   -Any Character except new line (new line is a hidden character)
\d  -Digit (0-9)
\D  -Not a Digit (0-9) everything but digits  
\w  -word character (a-z, A-Z, 0-9, _)
\W  -opposite (not word)
\s  -whitespace (space, tab, newline)
\S  -opposite aka not whitespace 


    anchors (match positions before or after characters)
##############################################################################

\b  -word boundry Ha HaHa    \bHA bHA\ has to be start/end of a word
\B  -opposite 
^   -start of string
$   -end of string

    character set 
    matches how a char
[]
[89]00[-.]\d\d\d[-.]\d\d\d\d
[3-5]
[a-zA-Z0-9]
[^a-z] matches opposite of expression [^h]at

734 434 2660
843-215-2433
800-215-2433

    quantifier
##############################################################################
    how many matches to match

*       -0 or more
+       -1 or more
?       -0 or one
{3}     -exact number
{3,4}   -range of numbers (min, max)

\d{3}[-.]\d{3}[-.]\d{4} (saves time to get phone num)
734 434 2660

Mr\.?\s[A-Z]\w* this gets all the mr
Mr. Schafer
Mr Smith
Ms Davis
Mrs. Robinson
Mr. T

    groups (makes is easy to get mr and mrs)
##############################################################################
M(r|s|rs)\.?\s[A-Z]\w* 

https://www.google.com
http://sammyg.com
https://youtube.com
https://www.nasa.gov

https?://(www\.)?\w+\.\w+ gets whole site
https?://(www\.)?\(w+)(\.\w+)        gets name and domain
            1       2   3       whole = 0
USE BACKREFERENCE TO GET CAPTURED GROUP
$1 or \1

$2$3 = google.com


    practice
##############################################################################
    billybob@gmail.com
    s.w.gieseker@gmail.com
    swxg@umich.edu
    420blazeit69@hotmail.net

    (dash - should go last or first)
    [a-zA-Z0-9_+.-]+@[a-zA-Z-]+\.(com|edu|net)
    [a-zA-Z0-9_+.-]+@[a-zA-Z-]+\.[a-zA-Z0-9-.]+

    (practice reading and writing) 
    when reading paste in to searcher and use example


    explain regex
    resources 
        https://regexr.com/
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
    what is it?
        A regular expression is a sequence of characters that define a search pattern. Usually such patterns are 
        used by string-searching algorithms for "find" or "find and replace" operations on strings, or for input validation. 
    why use it?
        can put in config files so you dont have to recompile

        if (str.equals("DooWahDiddy")) // No problemo.

        if (str.contains("destroy the earth")) // Okay.

        if (str.indexOf(";") < str.length / 2) // Not bad.
        Once your conditions contain multiple predicates, then you've started inventing your own ad hoc string validation language, and you should probably just man up and study some regular expressions.

        if (str.startsWith("I") && str.endsWith("Widget") && (!str.contains("Monkey") || !str.contains("Pox")))  // Madness.


    when to use it?

        best use case is to find and replace in language agnostic way

            checks validity of creditcard
        ^(?:4[0-9]{12}(?:[0-9]{3})?          # Visa
        |  (?:5[1-5][0-9]{2}                # MasterCard
        | 222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}
        |  3[47][0-9]{13}                   # American Express
        |  3(?:0[0-5]|[68][0-9])[0-9]{11}   # Diners Club
        |  6(?:011|5[0-9]{2})[0-9]{12}      # Discover
        |  (?:2131|1800|35\d{3})\d{11}      # JCB
        )$

        find and replace all creditcards in a doc and change to redacted

        find all phone numbers

        want to learn more words that end in -tion

        match a password 

            ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{6,12}$

            6 to 12 characters in length
            Must have at least one uppercase letter
            Must have at least one lower case letter
            Must have at least one digit
            Should contain other characters
